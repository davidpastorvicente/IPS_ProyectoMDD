//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace UPM_IPS.DNRDPVSQGProyectoMDD
{
	/// <summary>
	/// DomainClass Tapiz
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.Tapiz.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.Tapiz.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("aea2a9d4-58fa-411c-aefb-03a95867be4a")]
	public partial class Tapiz : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Tapiz domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xaea2a9d4, 0x58fa, 0x411c, 0xae, 0xfb, 0x03, 0xa9, 0x58, 0x67, 0xbe, 0x4a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Tapiz(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Tapiz(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region EstadoFin opposite domain role accessor
		/// <summary>
		/// Gets or sets EstadoFin.
		/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin.Tapiz
		/// </summary>
		public virtual EstadoFin EstadoFin
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin.TapizDomainRoleId) as EstadoFin;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin.TapizDomainRoleId, value);
			}
		}
		#endregion
		#region VentanaPrincipal opposite domain role accessor
		/// <summary>
		/// Gets or sets VentanaPrincipal.
		/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal.Tapiz
		/// </summary>
		public virtual VentanaPrincipal VentanaPrincipal
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal.TapizDomainRoleId) as VentanaPrincipal;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal.TapizDomainRoleId, value);
			}
		}
		#endregion
		#region VentanaSecundaria opposite domain role accessor
		
		/// <summary>
		/// Gets a list of VentanaSecundaria.
		/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria.Tapiz
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<VentanaSecundaria> VentanaSecundaria
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<VentanaSecundaria>, VentanaSecundaria>(global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria.TapizDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaPrincipal.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: TapizHasVentanaPrincipal.VentanaPrincipal
					if (this.VentanaPrincipal != null)
					{
						return false;
					}
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaSecundaria.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::UPM_IPS.DNRDPVSQGProyectoMDD.EstadoFin.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: TapizHasEstadoFin.EstadoFin
					if (this.EstadoFin != null)
					{
						return false;
					}
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaPrincipal sourceVentanaPrincipal1 = sourceElement as global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaPrincipal;
			if (sourceVentanaPrincipal1 != null)
			{
				// Create link for path TapizHasVentanaPrincipal.VentanaPrincipal
				this.VentanaPrincipal = sourceVentanaPrincipal1;

				return;
			}
				
			global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaSecundaria sourceVentanaSecundaria2 = sourceElement as global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaSecundaria;
			if (sourceVentanaSecundaria2 != null)
			{
				// Create link for path TapizHasVentanaSecundaria.VentanaSecundaria
				this.VentanaSecundaria.Add(sourceVentanaSecundaria2);

				return;
			}
				
			global::UPM_IPS.DNRDPVSQGProyectoMDD.EstadoFin sourceEstadoFin3 = sourceElement as global::UPM_IPS.DNRDPVSQGProyectoMDD.EstadoFin;
			if (sourceEstadoFin3 != null)
			{
				// Create link for path TapizHasEstadoFin.EstadoFin
				this.EstadoFin = sourceEstadoFin3;

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaPrincipal sourceVentanaPrincipal1 = sourceElement as global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaPrincipal;
			if (sourceVentanaPrincipal1 != null)
			{
				// Delete link for path TapizHasVentanaPrincipal.VentanaPrincipal
				
				foreach (DslModeling::ElementLink link in global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal.GetLinks((global::UPM_IPS.DNRDPVSQGProyectoMDD.Tapiz)this, sourceVentanaPrincipal1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal.TapizDomainRoleId, global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal.VentanaPrincipalDomainRoleId);
				}

				return;
			}
				
			global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaSecundaria sourceVentanaSecundaria2 = sourceElement as global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaSecundaria;
			if (sourceVentanaSecundaria2 != null)
			{
				// Delete link for path TapizHasVentanaSecundaria.VentanaSecundaria
				
				foreach (DslModeling::ElementLink link in global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria.GetLinks((global::UPM_IPS.DNRDPVSQGProyectoMDD.Tapiz)this, sourceVentanaSecundaria2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria.TapizDomainRoleId, global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria.VentanaSecundariaDomainRoleId);
				}

				return;
			}
				
			global::UPM_IPS.DNRDPVSQGProyectoMDD.EstadoFin sourceEstadoFin3 = sourceElement as global::UPM_IPS.DNRDPVSQGProyectoMDD.EstadoFin;
			if (sourceEstadoFin3 != null)
			{
				// Delete link for path TapizHasEstadoFin.EstadoFin
				
				foreach (DslModeling::ElementLink link in global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin.GetLinks((global::UPM_IPS.DNRDPVSQGProyectoMDD.Tapiz)this, sourceEstadoFin3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin.TapizDomainRoleId, global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin.EstadoFinDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace UPM_IPS.DNRDPVSQGProyectoMDD
{
	/// <summary>
	/// DomainClass Ventana
	/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.Ventana
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.Ventana.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.Ventana.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("4443de02-3985-41d1-83c2-00ba9b2ab4d9")]
	public abstract partial class Ventana : Objetivo
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Ventana domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4443de02, 0x3985, 0x41d1, 0x83, 0xc2, 0x00, 0xba, 0x9b, 0x2a, 0xb4, 0xd9);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected Ventana(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region nombre domain property code
		
		/// <summary>
		/// nombre domain property Id.
		/// </summary>
		public static readonly global::System.Guid nombreDomainPropertyId = new global::System.Guid(0x41161d6a, 0x63f3, 0x4872, 0x9a, 0x12, 0x6a, 0xb8, 0xb3, 0xa2, 0x4f, 0xac);
		
		/// <summary>
		/// Storage for nombre
		/// </summary>
		private global::System.String nombrePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of nombre domain property.
		/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.Ventana.Nombre
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.Ventana/nombre.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.Ventana/nombre.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("41161d6a-63f3-4872-9a12-6ab8b3a24fac")]
		public global::System.String nombre
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nombrePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				nombrePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Ventana.nombre domain property.
		/// </summary>
		internal sealed partial class nombrePropertyHandler : DslModeling::DomainPropertyValueHandler<Ventana, global::System.String>
		{
			private nombrePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Ventana.nombre domain property value handler.
			/// </summary>
			public static readonly nombrePropertyHandler Instance = new nombrePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Ventana.nombre domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return nombreDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Ventana element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.nombrePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Ventana element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nombrePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region tamaño domain property code
		
		/// <summary>
		/// tamaño domain property Id.
		/// </summary>
		public static readonly global::System.Guid tamañoDomainPropertyId = new global::System.Guid(0x0a432516, 0xc6a5, 0x44ec, 0xa1, 0x5e, 0xaa, 0xa7, 0xd6, 0x4c, 0x76, 0xd2);
		
		/// <summary>
		/// Storage for tamaño
		/// </summary>
		private global::System.String tamañoPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of tamaño domain property.
		/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.Ventana.Tamaño
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.Ventana/tamaño.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.Ventana/tamaño.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("0a432516-c6a5-44ec-a15e-aaa7d64c76d2")]
		public global::System.String tamaño
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tamañoPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				tamañoPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Ventana.tamaño domain property.
		/// </summary>
		internal sealed partial class tamañoPropertyHandler : DslModeling::DomainPropertyValueHandler<Ventana, global::System.String>
		{
			private tamañoPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Ventana.tamaño domain property value handler.
			/// </summary>
			public static readonly tamañoPropertyHandler Instance = new tamañoPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Ventana.tamaño domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return tamañoDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Ventana element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tamañoPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Ventana element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tamañoPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Menu opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Menu.
		/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu.Ventana
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Menu> Menu
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Menu>, Menu>(global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu.VentanaDomainRoleId);
			}
		}
		#endregion
		#region Boton opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Boton.
		/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton.Ventana
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Boton> Boton
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Boton>, Boton>(global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton.VentanaDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::UPM_IPS.DNRDPVSQGProyectoMDD.Boton.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::UPM_IPS.DNRDPVSQGProyectoMDD.Menu.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::UPM_IPS.DNRDPVSQGProyectoMDD.Boton sourceBoton1 = sourceElement as global::UPM_IPS.DNRDPVSQGProyectoMDD.Boton;
			if (sourceBoton1 != null)
			{
				// Create link for path VentanaHasBoton.Boton
				this.Boton.Add(sourceBoton1);

				return;
			}
				
			global::UPM_IPS.DNRDPVSQGProyectoMDD.Menu sourceMenu2 = sourceElement as global::UPM_IPS.DNRDPVSQGProyectoMDD.Menu;
			if (sourceMenu2 != null)
			{
				// Create link for path VentanaHasMenu.Menu
				this.Menu.Add(sourceMenu2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::UPM_IPS.DNRDPVSQGProyectoMDD.Boton sourceBoton1 = sourceElement as global::UPM_IPS.DNRDPVSQGProyectoMDD.Boton;
			if (sourceBoton1 != null)
			{
				// Delete link for path VentanaHasBoton.Boton
				
				foreach (DslModeling::ElementLink link in global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton.GetLinks((global::UPM_IPS.DNRDPVSQGProyectoMDD.Ventana)this, sourceBoton1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton.VentanaDomainRoleId, global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton.BotonDomainRoleId);
				}

				return;
			}
				
			global::UPM_IPS.DNRDPVSQGProyectoMDD.Menu sourceMenu2 = sourceElement as global::UPM_IPS.DNRDPVSQGProyectoMDD.Menu;
			if (sourceMenu2 != null)
			{
				// Delete link for path VentanaHasMenu.Menu
				
				foreach (DslModeling::ElementLink link in global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu.GetLinks((global::UPM_IPS.DNRDPVSQGProyectoMDD.Ventana)this, sourceMenu2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu.VentanaDomainRoleId, global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu.MenuDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace UPM_IPS.DNRDPVSQGProyectoMDD
{
	/// <summary>
	/// DomainClass VentanaPrincipal
	/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.VentanaPrincipal
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.VentanaPrincipal.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.VentanaPrincipal.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("6187e330-71ee-41ed-8151-c0eec46167b9")]
	public partial class VentanaPrincipal : Ventana
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// VentanaPrincipal domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6187e330, 0x71ee, 0x41ed, 0x81, 0x51, 0xc0, 0xee, 0xc4, 0x61, 0x67, 0xb9);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public VentanaPrincipal(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public VentanaPrincipal(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Tapiz opposite domain role accessor
		/// <summary>
		/// Gets or sets Tapiz.
		/// Description for
		/// UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal.VentanaPrincipal
		/// </summary>
		public virtual Tapiz Tapiz
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal.VentanaPrincipalDomainRoleId) as Tapiz;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal.VentanaPrincipalDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace UPM_IPS.DNRDPVSQGProyectoMDD
{
	/// <summary>
	/// DomainClass VentanaSecundaria
	/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.VentanaSecundaria
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.VentanaSecundaria.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.VentanaSecundaria.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1b424f02-4a59-4b1f-b59e-3da4f662164a")]
	public partial class VentanaSecundaria : Ventana
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// VentanaSecundaria domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1b424f02, 0x4a59, 0x4b1f, 0xb5, 0x9e, 0x3d, 0xa4, 0xf6, 0x62, 0x16, 0x4a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public VentanaSecundaria(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public VentanaSecundaria(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region modal domain property code
		
		/// <summary>
		/// modal domain property Id.
		/// </summary>
		public static readonly global::System.Guid modalDomainPropertyId = new global::System.Guid(0x6ff4da62, 0xed24, 0x4f27, 0xb4, 0x5c, 0x1e, 0x39, 0x5d, 0xe5, 0x77, 0x0e);
		
		/// <summary>
		/// Storage for modal
		/// </summary>
		private global::System.Boolean modalPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of modal domain property.
		/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.VentanaSecundaria.Modal
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.VentanaSecundaria/modal.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.VentanaSecundaria/modal.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("6ff4da62-ed24-4f27-b45c-1e395de5770e")]
		public global::System.Boolean modal
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return modalPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				modalPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the VentanaSecundaria.modal domain property.
		/// </summary>
		internal sealed partial class modalPropertyHandler : DslModeling::DomainPropertyValueHandler<VentanaSecundaria, global::System.Boolean>
		{
			private modalPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the VentanaSecundaria.modal domain property value handler.
			/// </summary>
			public static readonly modalPropertyHandler Instance = new modalPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the VentanaSecundaria.modal domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return modalDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(VentanaSecundaria element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.modalPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(VentanaSecundaria element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.modalPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Tapiz opposite domain role accessor
		/// <summary>
		/// Gets or sets Tapiz.
		/// Description for
		/// UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria.VentanaSecundaria
		/// </summary>
		public virtual Tapiz Tapiz
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria.VentanaSecundariaDomainRoleId) as Tapiz;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria.VentanaSecundariaDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace UPM_IPS.DNRDPVSQGProyectoMDD
{
	/// <summary>
	/// DomainClass Menu
	/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.Menu
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.Menu.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.Menu.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e9e3e494-c5b0-45d8-83ef-2972757d4a99")]
	public partial class Menu : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Menu domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe9e3e494, 0xc5b0, 0x45d8, 0x83, 0xef, 0x29, 0x72, 0x75, 0x7d, 0x4a, 0x99);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Menu(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Menu(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region caption domain property code
		
		/// <summary>
		/// caption domain property Id.
		/// </summary>
		public static readonly global::System.Guid captionDomainPropertyId = new global::System.Guid(0xf6c27816, 0x09de, 0x46f7, 0x83, 0xf3, 0xc8, 0x12, 0x8d, 0xa9, 0xf5, 0x9c);
		
		/// <summary>
		/// Storage for caption
		/// </summary>
		private global::System.String captionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of caption domain property.
		/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.Menu.Caption
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.Menu/caption.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.Menu/caption.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f6c27816-09de-46f7-83f3-c8128da9f59c")]
		public global::System.String caption
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return captionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				captionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Menu.caption domain property.
		/// </summary>
		internal sealed partial class captionPropertyHandler : DslModeling::DomainPropertyValueHandler<Menu, global::System.String>
		{
			private captionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Menu.caption domain property value handler.
			/// </summary>
			public static readonly captionPropertyHandler Instance = new captionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Menu.caption domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return captionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Menu element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.captionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Menu element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.captionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Item opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Item.
		/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem.Menu
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Item> Item
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Item>, Item>(global::UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem.MenuDomainRoleId);
			}
		}
		#endregion
		#region VentanaMenu opposite domain role accessor
		/// <summary>
		/// Gets or sets VentanaMenu.
		/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu.Menu
		/// </summary>
		public virtual Ventana VentanaMenu
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu.MenuDomainRoleId) as Ventana;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu.MenuDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::UPM_IPS.DNRDPVSQGProyectoMDD.Item.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::UPM_IPS.DNRDPVSQGProyectoMDD.Item sourceItem1 = sourceElement as global::UPM_IPS.DNRDPVSQGProyectoMDD.Item;
			if (sourceItem1 != null)
			{
				// Create link for path MenuHasItem.Item
				this.Item.Add(sourceItem1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::UPM_IPS.DNRDPVSQGProyectoMDD.Item sourceItem1 = sourceElement as global::UPM_IPS.DNRDPVSQGProyectoMDD.Item;
			if (sourceItem1 != null)
			{
				// Delete link for path MenuHasItem.Item
				
				foreach (DslModeling::ElementLink link in global::UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem.GetLinks((global::UPM_IPS.DNRDPVSQGProyectoMDD.Menu)this, sourceItem1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem.MenuDomainRoleId, global::UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem.ItemDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace UPM_IPS.DNRDPVSQGProyectoMDD
{
	/// <summary>
	/// DomainClass Item
	/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.Item
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.Item.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.Item.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c832dbb2-08e5-4377-aef7-db7c5dbb666f")]
	public partial class Item : ComponenteAccion
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Item domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc832dbb2, 0x08e5, 0x4377, 0xae, 0xf7, 0xdb, 0x7c, 0x5d, 0xbb, 0x66, 0x6f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Item(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Item(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region titulo domain property code
		
		/// <summary>
		/// titulo domain property Id.
		/// </summary>
		public static readonly global::System.Guid tituloDomainPropertyId = new global::System.Guid(0xdc23226d, 0xb2a7, 0x42bb, 0x8c, 0x32, 0x5d, 0x80, 0x5e, 0xbf, 0x4f, 0xb7);
		
		/// <summary>
		/// Storage for titulo
		/// </summary>
		private global::System.String tituloPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of titulo domain property.
		/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.Item.Titulo
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.Item/titulo.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.Item/titulo.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("dc23226d-b2a7-42bb-8c32-5d805ebf4fb7")]
		public global::System.String titulo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tituloPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				tituloPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Item.titulo domain property.
		/// </summary>
		internal sealed partial class tituloPropertyHandler : DslModeling::DomainPropertyValueHandler<Item, global::System.String>
		{
			private tituloPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Item.titulo domain property value handler.
			/// </summary>
			public static readonly tituloPropertyHandler Instance = new tituloPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Item.titulo domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return tituloDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Item element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tituloPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Item element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tituloPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region tipo domain property code
		
		/// <summary>
		/// tipo domain property Id.
		/// </summary>
		public static readonly global::System.Guid tipoDomainPropertyId = new global::System.Guid(0xbc6937dc, 0x1dcd, 0x4a01, 0xb9, 0x1b, 0x11, 0x26, 0x19, 0x74, 0xa0, 0xc4);
		
		/// <summary>
		/// Storage for tipo
		/// </summary>
		private TipoItem tipoPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of tipo domain property.
		/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.Item.Tipo
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.Item/tipo.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.Item/tipo.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("bc6937dc-1dcd-4a01-b91b-11261974a0c4")]
		public TipoItem tipo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tipoPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				tipoPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Item.tipo domain property.
		/// </summary>
		internal sealed partial class tipoPropertyHandler : DslModeling::DomainPropertyValueHandler<Item, TipoItem>
		{
			private tipoPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Item.tipo domain property value handler.
			/// </summary>
			public static readonly tipoPropertyHandler Instance = new tipoPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Item.tipo domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return tipoDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed TipoItem GetValue(Item element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tipoPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Item element, TipoItem newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				TipoItem oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tipoPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Menu opposite domain role accessor
		/// <summary>
		/// Gets or sets Menu.
		/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem.Item
		/// </summary>
		public virtual Menu Menu
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem.ItemDomainRoleId) as Menu;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem.ItemDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace UPM_IPS.DNRDPVSQGProyectoMDD
{
	/// <summary>
	/// DomainClass Boton
	/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.Boton
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.Boton.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.Boton.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1e346eb2-8b6c-4f95-96ce-ce12a49c6bb2")]
	public partial class Boton : ComponenteAccion
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Boton domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1e346eb2, 0x8b6c, 0x4f95, 0x96, 0xce, 0xce, 0x12, 0xa4, 0x9c, 0x6b, 0xb2);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Boton(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Boton(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region caption domain property code
		
		/// <summary>
		/// caption domain property Id.
		/// </summary>
		public static readonly global::System.Guid captionDomainPropertyId = new global::System.Guid(0xf9b25e0e, 0x12c0, 0x46c7, 0x92, 0x50, 0x28, 0xa7, 0xa3, 0xd1, 0xe4, 0xf0);
		
		/// <summary>
		/// Storage for caption
		/// </summary>
		private global::System.String captionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of caption domain property.
		/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.Boton.Caption
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.Boton/caption.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.Boton/caption.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f9b25e0e-12c0-46c7-9250-28a7a3d1e4f0")]
		public global::System.String caption
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return captionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				captionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Boton.caption domain property.
		/// </summary>
		internal sealed partial class captionPropertyHandler : DslModeling::DomainPropertyValueHandler<Boton, global::System.String>
		{
			private captionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Boton.caption domain property value handler.
			/// </summary>
			public static readonly captionPropertyHandler Instance = new captionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Boton.caption domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return captionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Boton element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.captionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Boton element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.captionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region VentanaBoton opposite domain role accessor
		/// <summary>
		/// Gets or sets VentanaBoton.
		/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton.Boton
		/// </summary>
		public virtual Ventana VentanaBoton
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton.BotonDomainRoleId) as Ventana;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton.BotonDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace UPM_IPS.DNRDPVSQGProyectoMDD
{
	/// <summary>
	/// DomainClass EstadoFin
	/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.EstadoFin
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.EstadoFin.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.EstadoFin.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("b3c00823-45e3-4ac1-b2a9-6db18010968a")]
	public partial class EstadoFin : Objetivo
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EstadoFin domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb3c00823, 0x45e3, 0x4ac1, 0xb2, 0xa9, 0x6d, 0xb1, 0x80, 0x10, 0x96, 0x8a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EstadoFin(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EstadoFin(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Tapiz opposite domain role accessor
		/// <summary>
		/// Gets or sets Tapiz.
		/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin.EstadoFin
		/// </summary>
		public virtual Tapiz Tapiz
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin.EstadoFinDomainRoleId) as Tapiz;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin.EstadoFinDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace UPM_IPS.DNRDPVSQGProyectoMDD
{
	/// <summary>
	/// DomainClass ComponenteAccion
	/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.ComponenteAccion
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.ComponenteAccion.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.ComponenteAccion.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("02a6f5b1-e113-497b-b9ea-6477a2d5c87b")]
	public abstract partial class ComponenteAccion : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ComponenteAccion domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x02a6f5b1, 0xe113, 0x497b, 0xb9, 0xea, 0x64, 0x77, 0xa2, 0xd5, 0xc8, 0x7b);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ComponenteAccion(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Objetivo opposite domain role accessor
		/// <summary>
		/// Gets or sets Objetivo.
		/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion.ComponenteAccion
		/// </summary>
		public virtual Objetivo Objetivo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion.ComponenteAccionDomainRoleId) as Objetivo;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion.ComponenteAccionDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace UPM_IPS.DNRDPVSQGProyectoMDD
{
	/// <summary>
	/// DomainClass Objetivo
	/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.Objetivo
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.Objetivo.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.Objetivo.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("0f62de27-543e-423d-90c6-8ce0fffb8d87")]
	public abstract partial class Objetivo : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Objetivo domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0f62de27, 0x543e, 0x423d, 0x90, 0xc6, 0x8c, 0xe0, 0xff, 0xfb, 0x8d, 0x87);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected Objetivo(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ComponenteAccion opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ComponenteAccion.
		/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion.Objetivo
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ComponenteAccion> ComponenteAccion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ComponenteAccion>, ComponenteAccion>(global::UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion.ObjetivoDomainRoleId);
			}
		}
		#endregion
	}
}
