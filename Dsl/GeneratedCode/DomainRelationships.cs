//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace UPM_IPS.DNRDPVSQGProyectoMDD
{
	/// <summary>
	/// DomainRelationship MenuHasItem
	/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("711899b1-9d86-466e-9f22-b73e451b7370")]
	public partial class MenuHasItem : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MenuHasItem domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x711899b1, 0x9d86, 0x466e, 0x9f, 0x22, 0xb7, 0x3e, 0x45, 0x1b, 0x73, 0x70);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MenuHasItem link in the same Partition as the given Menu
		/// </summary>
		/// <param name="source">Menu to use as the source of the relationship.</param>
		/// <param name="target">Item to use as the target of the relationship.</param>
		public MenuHasItem(Menu source, Item target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MenuHasItem.MenuDomainRoleId, source), new DslModeling::RoleAssignment(MenuHasItem.ItemDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MenuHasItem(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MenuHasItem(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MenuHasItem(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MenuHasItem(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Menu domain role code
		
		/// <summary>
		/// Menu domain role Id.
		/// </summary>
		public static readonly global::System.Guid MenuDomainRoleId = new global::System.Guid(0x737ed6ee, 0x1454, 0x4cd4, 0x92, 0x53, 0x68, 0xb7, 0x35, 0x14, 0x88, 0x6f);
		
		/// <summary>
		/// DomainRole Menu
		/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem.Menu
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem/Menu.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem/Menu.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Item", PropertyDisplayNameKey="UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem/Menu.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("737ed6ee-1454-4cd4-9253-68b73514886f")]
		public virtual Menu Menu
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Menu)DslModeling::DomainRoleInfo.GetRolePlayer(this, MenuDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MenuDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Menu of a Item
		/// <summary>
		/// Gets Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Menu GetMenu(Item element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ItemDomainRoleId) as Menu;
		}
		
		/// <summary>
		/// Sets Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMenu(Item element, Menu newMenu)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ItemDomainRoleId, newMenu);
		}
		#endregion
		#region Item domain role code
		
		/// <summary>
		/// Item domain role Id.
		/// </summary>
		public static readonly global::System.Guid ItemDomainRoleId = new global::System.Guid(0x6d6c25b4, 0x8ccc, 0x4e56, 0xab, 0x39, 0x59, 0x50, 0x60, 0x7b, 0xe3, 0xfd);
		
		/// <summary>
		/// DomainRole Item
		/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem.Item
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem/Item.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem/Item.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Menu", PropertyDisplayNameKey="UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem/Item.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6d6c25b4-8ccc-4e56-ab39-5950607be3fd")]
		public virtual Item Item
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Item)DslModeling::DomainRoleInfo.GetRolePlayer(this, ItemDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ItemDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Item of a Menu
		/// <summary>
		/// Gets a list of Item.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Item> GetItem(Menu element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Item>, Item>(element, MenuDomainRoleId);
		}
		#endregion
		#region Menu link accessor
		/// <summary>
		/// Get the list of MenuHasItem links to a Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem> GetLinksToItem ( global::UPM_IPS.DNRDPVSQGProyectoMDD.Menu menuInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem>(menuInstance, global::UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem.MenuDomainRoleId);
		}
		#endregion
		#region Item link accessor
		/// <summary>
		/// Get the MenuHasItem link to a Item.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem GetLinkToMenu (global::UPM_IPS.DNRDPVSQGProyectoMDD.Item itemInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem>(itemInstance, global::UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem.ItemDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Item not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MenuHasItem instance accessors
		
		/// <summary>
		/// Get any MenuHasItem links between a given Menu and a Item.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem> GetLinks( global::UPM_IPS.DNRDPVSQGProyectoMDD.Menu source, global::UPM_IPS.DNRDPVSQGProyectoMDD.Item target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem>();
			global::System.Collections.Generic.IList<global::UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem>(source, global::UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem.MenuDomainRoleId);
			foreach ( global::UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem link in links )
			{
				if ( target.Equals(link.Item) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MenuHasItem link between a given Menuand a Item.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem GetLink( global::UPM_IPS.DNRDPVSQGProyectoMDD.Menu source, global::UPM_IPS.DNRDPVSQGProyectoMDD.Item target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem>(source, global::UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem.MenuDomainRoleId);
			foreach ( global::UPM_IPS.DNRDPVSQGProyectoMDD.MenuHasItem link in links )
			{
				if ( target.Equals(link.Item) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.DNRDPVSQGProyectoMDD
{
	/// <summary>
	/// DomainRelationship VentanaHasMenu
	/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("addf8840-b3ab-4b63-ac3c-4f177a65febe")]
	public partial class VentanaHasMenu : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// VentanaHasMenu domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xaddf8840, 0xb3ab, 0x4b63, 0xac, 0x3c, 0x4f, 0x17, 0x7a, 0x65, 0xfe, 0xbe);
	
				
		/// <summary>
		/// Constructor
		/// Creates a VentanaHasMenu link in the same Partition as the given Ventana
		/// </summary>
		/// <param name="source">Ventana to use as the source of the relationship.</param>
		/// <param name="target">Menu to use as the target of the relationship.</param>
		public VentanaHasMenu(Ventana source, Menu target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(VentanaHasMenu.VentanaDomainRoleId, source), new DslModeling::RoleAssignment(VentanaHasMenu.MenuDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public VentanaHasMenu(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public VentanaHasMenu(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public VentanaHasMenu(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public VentanaHasMenu(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Ventana domain role code
		
		/// <summary>
		/// Ventana domain role Id.
		/// </summary>
		public static readonly global::System.Guid VentanaDomainRoleId = new global::System.Guid(0x739a0924, 0x01d1, 0x464b, 0xb3, 0xb9, 0x12, 0x67, 0x93, 0xf4, 0xc2, 0x65);
		
		/// <summary>
		/// DomainRole Ventana
		/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu.Ventana
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu/Ventana.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu/Ventana.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Menu", PropertyDisplayNameKey="UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu/Ventana.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("739a0924-01d1-464b-b3b9-126793f4c265")]
		public virtual Ventana Ventana
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Ventana)DslModeling::DomainRoleInfo.GetRolePlayer(this, VentanaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, VentanaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access VentanaMenu of a Menu
		/// <summary>
		/// Gets VentanaMenu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Ventana GetVentanaMenu(Menu element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MenuDomainRoleId) as Ventana;
		}
		
		/// <summary>
		/// Sets VentanaMenu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetVentanaMenu(Menu element, Ventana newVentana)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MenuDomainRoleId, newVentana);
		}
		#endregion
		#region Menu domain role code
		
		/// <summary>
		/// Menu domain role Id.
		/// </summary>
		public static readonly global::System.Guid MenuDomainRoleId = new global::System.Guid(0xc50d03c3, 0x2faf, 0x48a1, 0x85, 0x47, 0xb2, 0x14, 0xef, 0xfd, 0xf4, 0x1e);
		
		/// <summary>
		/// DomainRole Menu
		/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu.Menu
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu/Menu.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu/Menu.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "VentanaMenu", PropertyDisplayNameKey="UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu/Menu.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("c50d03c3-2faf-48a1-8547-b214effdf41e")]
		public virtual Menu Menu
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Menu)DslModeling::DomainRoleInfo.GetRolePlayer(this, MenuDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MenuDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Menu of a Ventana
		/// <summary>
		/// Gets a list of Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Menu> GetMenu(Ventana element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Menu>, Menu>(element, VentanaDomainRoleId);
		}
		#endregion
		#region Ventana link accessor
		/// <summary>
		/// Get the list of VentanaHasMenu links to a Ventana.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu> GetLinksToMenu ( global::UPM_IPS.DNRDPVSQGProyectoMDD.Ventana ventanaInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu>(ventanaInstance, global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu.VentanaDomainRoleId);
		}
		#endregion
		#region Menu link accessor
		/// <summary>
		/// Get the VentanaHasMenu link to a Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu GetLinkToVentanaMenu (global::UPM_IPS.DNRDPVSQGProyectoMDD.Menu menuInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu>(menuInstance, global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu.MenuDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Menu not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region VentanaHasMenu instance accessors
		
		/// <summary>
		/// Get any VentanaHasMenu links between a given Ventana and a Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu> GetLinks( global::UPM_IPS.DNRDPVSQGProyectoMDD.Ventana source, global::UPM_IPS.DNRDPVSQGProyectoMDD.Menu target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu>();
			global::System.Collections.Generic.IList<global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu>(source, global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu.VentanaDomainRoleId);
			foreach ( global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu link in links )
			{
				if ( target.Equals(link.Menu) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one VentanaHasMenu link between a given Ventanaand a Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu GetLink( global::UPM_IPS.DNRDPVSQGProyectoMDD.Ventana source, global::UPM_IPS.DNRDPVSQGProyectoMDD.Menu target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu>(source, global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu.VentanaDomainRoleId);
			foreach ( global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasMenu link in links )
			{
				if ( target.Equals(link.Menu) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.DNRDPVSQGProyectoMDD
{
	/// <summary>
	/// DomainRelationship VentanaHasBoton
	/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("d3c0c769-7431-4429-b858-e1c1b1cb3da9")]
	public partial class VentanaHasBoton : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// VentanaHasBoton domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd3c0c769, 0x7431, 0x4429, 0xb8, 0x58, 0xe1, 0xc1, 0xb1, 0xcb, 0x3d, 0xa9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a VentanaHasBoton link in the same Partition as the given Ventana
		/// </summary>
		/// <param name="source">Ventana to use as the source of the relationship.</param>
		/// <param name="target">Boton to use as the target of the relationship.</param>
		public VentanaHasBoton(Ventana source, Boton target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(VentanaHasBoton.VentanaDomainRoleId, source), new DslModeling::RoleAssignment(VentanaHasBoton.BotonDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public VentanaHasBoton(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public VentanaHasBoton(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public VentanaHasBoton(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public VentanaHasBoton(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Ventana domain role code
		
		/// <summary>
		/// Ventana domain role Id.
		/// </summary>
		public static readonly global::System.Guid VentanaDomainRoleId = new global::System.Guid(0xad5912b2, 0x6cc1, 0x41fa, 0xaf, 0x7f, 0x42, 0xc6, 0xa0, 0x62, 0xe1, 0x99);
		
		/// <summary>
		/// DomainRole Ventana
		/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton.Ventana
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton/Ventana.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton/Ventana.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Boton", PropertyDisplayNameKey="UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton/Ventana.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ad5912b2-6cc1-41fa-af7f-42c6a062e199")]
		public virtual Ventana Ventana
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Ventana)DslModeling::DomainRoleInfo.GetRolePlayer(this, VentanaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, VentanaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access VentanaBoton of a Boton
		/// <summary>
		/// Gets VentanaBoton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Ventana GetVentanaBoton(Boton element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, BotonDomainRoleId) as Ventana;
		}
		
		/// <summary>
		/// Sets VentanaBoton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetVentanaBoton(Boton element, Ventana newVentana)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, BotonDomainRoleId, newVentana);
		}
		#endregion
		#region Boton domain role code
		
		/// <summary>
		/// Boton domain role Id.
		/// </summary>
		public static readonly global::System.Guid BotonDomainRoleId = new global::System.Guid(0x26ebc669, 0x3681, 0x4451, 0x92, 0x76, 0xee, 0x30, 0xe3, 0xce, 0x32, 0x35);
		
		/// <summary>
		/// DomainRole Boton
		/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton.Boton
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton/Boton.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton/Boton.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "VentanaBoton", PropertyDisplayNameKey="UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton/Boton.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("26ebc669-3681-4451-9276-ee30e3ce3235")]
		public virtual Boton Boton
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Boton)DslModeling::DomainRoleInfo.GetRolePlayer(this, BotonDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BotonDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Boton of a Ventana
		/// <summary>
		/// Gets a list of Boton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Boton> GetBoton(Ventana element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Boton>, Boton>(element, VentanaDomainRoleId);
		}
		#endregion
		#region Ventana link accessor
		/// <summary>
		/// Get the list of VentanaHasBoton links to a Ventana.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton> GetLinksToBoton ( global::UPM_IPS.DNRDPVSQGProyectoMDD.Ventana ventanaInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton>(ventanaInstance, global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton.VentanaDomainRoleId);
		}
		#endregion
		#region Boton link accessor
		/// <summary>
		/// Get the VentanaHasBoton link to a Boton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton GetLinkToVentanaBoton (global::UPM_IPS.DNRDPVSQGProyectoMDD.Boton botonInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton>(botonInstance, global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton.BotonDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Boton not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region VentanaHasBoton instance accessors
		
		/// <summary>
		/// Get any VentanaHasBoton links between a given Ventana and a Boton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton> GetLinks( global::UPM_IPS.DNRDPVSQGProyectoMDD.Ventana source, global::UPM_IPS.DNRDPVSQGProyectoMDD.Boton target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton>();
			global::System.Collections.Generic.IList<global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton>(source, global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton.VentanaDomainRoleId);
			foreach ( global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton link in links )
			{
				if ( target.Equals(link.Boton) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one VentanaHasBoton link between a given Ventanaand a Boton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton GetLink( global::UPM_IPS.DNRDPVSQGProyectoMDD.Ventana source, global::UPM_IPS.DNRDPVSQGProyectoMDD.Boton target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton>(source, global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton.VentanaDomainRoleId);
			foreach ( global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaHasBoton link in links )
			{
				if ( target.Equals(link.Boton) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.DNRDPVSQGProyectoMDD
{
	/// <summary>
	/// DomainRelationship TapizHasEstadoFin
	/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e9f05b19-80f7-4ae4-89de-a85c6eb85605")]
	public partial class TapizHasEstadoFin : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TapizHasEstadoFin domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe9f05b19, 0x80f7, 0x4ae4, 0x89, 0xde, 0xa8, 0x5c, 0x6e, 0xb8, 0x56, 0x05);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TapizHasEstadoFin link in the same Partition as the given Tapiz
		/// </summary>
		/// <param name="source">Tapiz to use as the source of the relationship.</param>
		/// <param name="target">EstadoFin to use as the target of the relationship.</param>
		public TapizHasEstadoFin(Tapiz source, EstadoFin target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TapizHasEstadoFin.TapizDomainRoleId, source), new DslModeling::RoleAssignment(TapizHasEstadoFin.EstadoFinDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TapizHasEstadoFin(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TapizHasEstadoFin(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TapizHasEstadoFin(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TapizHasEstadoFin(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Tapiz domain role code
		
		/// <summary>
		/// Tapiz domain role Id.
		/// </summary>
		public static readonly global::System.Guid TapizDomainRoleId = new global::System.Guid(0xb2503225, 0x1f53, 0x460c, 0x8e, 0xf4, 0xea, 0x36, 0xcb, 0x88, 0xb1, 0x1d);
		
		/// <summary>
		/// DomainRole Tapiz
		/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin.Tapiz
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin/Tapiz.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin/Tapiz.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EstadoFin", PropertyDisplayNameKey="UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin/Tapiz.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("b2503225-1f53-460c-8ef4-ea36cb88b11d")]
		public virtual Tapiz Tapiz
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Tapiz)DslModeling::DomainRoleInfo.GetRolePlayer(this, TapizDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TapizDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Tapiz of a EstadoFin
		/// <summary>
		/// Gets Tapiz.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Tapiz GetTapiz(EstadoFin element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EstadoFinDomainRoleId) as Tapiz;
		}
		
		/// <summary>
		/// Sets Tapiz.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTapiz(EstadoFin element, Tapiz newTapiz)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EstadoFinDomainRoleId, newTapiz);
		}
		#endregion
		#region EstadoFin domain role code
		
		/// <summary>
		/// EstadoFin domain role Id.
		/// </summary>
		public static readonly global::System.Guid EstadoFinDomainRoleId = new global::System.Guid(0xd2f33503, 0x67e5, 0x4734, 0xb1, 0x7f, 0xe1, 0xa0, 0x6a, 0x49, 0x75, 0xdc);
		
		/// <summary>
		/// DomainRole EstadoFin
		/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin.EstadoFin
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin/EstadoFin.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin/EstadoFin.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Tapiz", PropertyDisplayNameKey="UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin/EstadoFin.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d2f33503-67e5-4734-b17f-e1a06a4975dc")]
		public virtual EstadoFin EstadoFin
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EstadoFin)DslModeling::DomainRoleInfo.GetRolePlayer(this, EstadoFinDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EstadoFinDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EstadoFin of a Tapiz
		/// <summary>
		/// Gets EstadoFin.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EstadoFin GetEstadoFin(Tapiz element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TapizDomainRoleId) as EstadoFin;
		}
		
		/// <summary>
		/// Sets EstadoFin.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEstadoFin(Tapiz element, EstadoFin newEstadoFin)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TapizDomainRoleId, newEstadoFin);
		}
		#endregion
		#region Tapiz link accessor
		/// <summary>
		/// Get the TapizHasEstadoFin link to a Tapiz.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin GetLinkToEstadoFin (global::UPM_IPS.DNRDPVSQGProyectoMDD.Tapiz tapizInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin>(tapizInstance, global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin.TapizDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Tapiz not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EstadoFin link accessor
		/// <summary>
		/// Get the TapizHasEstadoFin link to a EstadoFin.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin GetLinkToTapiz (global::UPM_IPS.DNRDPVSQGProyectoMDD.EstadoFin estadoFinInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin>(estadoFinInstance, global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin.EstadoFinDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EstadoFin not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TapizHasEstadoFin instance accessors
		
		/// <summary>
		/// Get any TapizHasEstadoFin links between a given Tapiz and a EstadoFin.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin> GetLinks( global::UPM_IPS.DNRDPVSQGProyectoMDD.Tapiz source, global::UPM_IPS.DNRDPVSQGProyectoMDD.EstadoFin target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin>();
			global::System.Collections.Generic.IList<global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin>(source, global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin.TapizDomainRoleId);
			foreach ( global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin link in links )
			{
				if ( target.Equals(link.EstadoFin) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TapizHasEstadoFin link between a given Tapizand a EstadoFin.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin GetLink( global::UPM_IPS.DNRDPVSQGProyectoMDD.Tapiz source, global::UPM_IPS.DNRDPVSQGProyectoMDD.EstadoFin target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin>(source, global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin.TapizDomainRoleId);
			foreach ( global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasEstadoFin link in links )
			{
				if ( target.Equals(link.EstadoFin) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.DNRDPVSQGProyectoMDD
{
	/// <summary>
	/// DomainRelationship RelacionAccion
	/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("277a3405-1ee0-4aae-8b98-83e5c67ad96b")]
	public partial class RelacionAccion : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RelacionAccion domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x277a3405, 0x1ee0, 0x4aae, 0x8b, 0x98, 0x83, 0xe5, 0xc6, 0x7a, 0xd9, 0x6b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RelacionAccion link in the same Partition as the given ComponenteAccion
		/// </summary>
		/// <param name="source">ComponenteAccion to use as the source of the relationship.</param>
		/// <param name="target">Objetivo to use as the target of the relationship.</param>
		public RelacionAccion(ComponenteAccion source, Objetivo target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RelacionAccion.ComponenteAccionDomainRoleId, source), new DslModeling::RoleAssignment(RelacionAccion.ObjetivoDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RelacionAccion(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RelacionAccion(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RelacionAccion(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RelacionAccion(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ComponenteAccion domain role code
		
		/// <summary>
		/// ComponenteAccion domain role Id.
		/// </summary>
		public static readonly global::System.Guid ComponenteAccionDomainRoleId = new global::System.Guid(0x4da43218, 0x71d7, 0x4017, 0x86, 0x4f, 0x1c, 0x6b, 0xf6, 0x13, 0x20, 0x5e);
		
		/// <summary>
		/// DomainRole ComponenteAccion
		/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion.ComponenteAccion
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion/ComponenteAccion.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion/ComponenteAccion.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Objetivo", PropertyDisplayNameKey="UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion/ComponenteAccion.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4da43218-71d7-4017-864f-1c6bf613205e")]
		public virtual ComponenteAccion ComponenteAccion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ComponenteAccion)DslModeling::DomainRoleInfo.GetRolePlayer(this, ComponenteAccionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ComponenteAccionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ComponenteAccion of a Objetivo
		/// <summary>
		/// Gets a list of ComponenteAccion.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ComponenteAccion> GetComponenteAccion(Objetivo element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ComponenteAccion>, ComponenteAccion>(element, ObjetivoDomainRoleId);
		}
		#endregion
		#region Objetivo domain role code
		
		/// <summary>
		/// Objetivo domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjetivoDomainRoleId = new global::System.Guid(0x7dcc2e7d, 0x3ad8, 0x4261, 0x9d, 0xe4, 0x91, 0x76, 0xb2, 0xe0, 0xce, 0xa0);
		
		/// <summary>
		/// DomainRole Objetivo
		/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion.Objetivo
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion/Objetivo.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion/Objetivo.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ComponenteAccion", PropertyDisplayNameKey="UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion/Objetivo.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7dcc2e7d-3ad8-4261-9de4-9176b2e0cea0")]
		public virtual Objetivo Objetivo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Objetivo)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjetivoDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjetivoDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Objetivo of a ComponenteAccion
		/// <summary>
		/// Gets Objetivo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Objetivo GetObjetivo(ComponenteAccion element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ComponenteAccionDomainRoleId) as Objetivo;
		}
		
		/// <summary>
		/// Sets Objetivo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetObjetivo(ComponenteAccion element, Objetivo newObjetivo)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ComponenteAccionDomainRoleId, newObjetivo);
		}
		#endregion
		#region ComponenteAccion link accessor
		/// <summary>
		/// Get the RelacionAccion link to a ComponenteAccion.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion GetLinkToObjetivo (global::UPM_IPS.DNRDPVSQGProyectoMDD.ComponenteAccion componenteAccionInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion>(componenteAccionInstance, global::UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion.ComponenteAccionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ComponenteAccion not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Objetivo link accessor
		/// <summary>
		/// Get the list of RelacionAccion links to a Objetivo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion> GetLinksToComponenteAccion ( global::UPM_IPS.DNRDPVSQGProyectoMDD.Objetivo objetivoInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion>(objetivoInstance, global::UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion.ObjetivoDomainRoleId);
		}
		#endregion
		#region RelacionAccion instance accessors
		
		/// <summary>
		/// Get any RelacionAccion links between a given ComponenteAccion and a Objetivo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion> GetLinks( global::UPM_IPS.DNRDPVSQGProyectoMDD.ComponenteAccion source, global::UPM_IPS.DNRDPVSQGProyectoMDD.Objetivo target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion>();
			global::System.Collections.Generic.IList<global::UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion>(source, global::UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion.ComponenteAccionDomainRoleId);
			foreach ( global::UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion link in links )
			{
				if ( target.Equals(link.Objetivo) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RelacionAccion link between a given ComponenteAccionand a Objetivo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion GetLink( global::UPM_IPS.DNRDPVSQGProyectoMDD.ComponenteAccion source, global::UPM_IPS.DNRDPVSQGProyectoMDD.Objetivo target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion>(source, global::UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion.ComponenteAccionDomainRoleId);
			foreach ( global::UPM_IPS.DNRDPVSQGProyectoMDD.RelacionAccion link in links )
			{
				if ( target.Equals(link.Objetivo) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.DNRDPVSQGProyectoMDD
{
	/// <summary>
	/// DomainRelationship TapizHasVentanaPrincipal
	/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("d2591aa2-52af-40dc-a04e-e1a13643750f")]
	public partial class TapizHasVentanaPrincipal : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TapizHasVentanaPrincipal domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd2591aa2, 0x52af, 0x40dc, 0xa0, 0x4e, 0xe1, 0xa1, 0x36, 0x43, 0x75, 0x0f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TapizHasVentanaPrincipal link in the same Partition as the given Tapiz
		/// </summary>
		/// <param name="source">Tapiz to use as the source of the relationship.</param>
		/// <param name="target">VentanaPrincipal to use as the target of the relationship.</param>
		public TapizHasVentanaPrincipal(Tapiz source, VentanaPrincipal target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TapizHasVentanaPrincipal.TapizDomainRoleId, source), new DslModeling::RoleAssignment(TapizHasVentanaPrincipal.VentanaPrincipalDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TapizHasVentanaPrincipal(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TapizHasVentanaPrincipal(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TapizHasVentanaPrincipal(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TapizHasVentanaPrincipal(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Tapiz domain role code
		
		/// <summary>
		/// Tapiz domain role Id.
		/// </summary>
		public static readonly global::System.Guid TapizDomainRoleId = new global::System.Guid(0x740ee1d9, 0x886b, 0x4a78, 0xb4, 0xce, 0x03, 0xa2, 0x7b, 0x2e, 0xdf, 0x9d);
		
		/// <summary>
		/// DomainRole Tapiz
		/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal.Tapiz
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal/Tapiz.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal/Tapiz.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "VentanaPrincipal", PropertyDisplayNameKey="UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal/Tapiz.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("740ee1d9-886b-4a78-b4ce-03a27b2edf9d")]
		public virtual Tapiz Tapiz
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Tapiz)DslModeling::DomainRoleInfo.GetRolePlayer(this, TapizDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TapizDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Tapiz of a VentanaPrincipal
		/// <summary>
		/// Gets Tapiz.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Tapiz GetTapiz(VentanaPrincipal element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, VentanaPrincipalDomainRoleId) as Tapiz;
		}
		
		/// <summary>
		/// Sets Tapiz.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTapiz(VentanaPrincipal element, Tapiz newTapiz)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, VentanaPrincipalDomainRoleId, newTapiz);
		}
		#endregion
		#region VentanaPrincipal domain role code
		
		/// <summary>
		/// VentanaPrincipal domain role Id.
		/// </summary>
		public static readonly global::System.Guid VentanaPrincipalDomainRoleId = new global::System.Guid(0xdbaf4f06, 0xe874, 0x453f, 0xb6, 0xd7, 0xcc, 0xad, 0xb7, 0xd2, 0x47, 0x52);
		
		/// <summary>
		/// DomainRole VentanaPrincipal
		/// Description for
		/// UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal.VentanaPrincipal
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal/VentanaPrincipal.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal/VentanaPrincipal.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Tapiz", PropertyDisplayNameKey="UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal/VentanaPrincipal.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("dbaf4f06-e874-453f-b6d7-ccadb7d24752")]
		public virtual VentanaPrincipal VentanaPrincipal
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (VentanaPrincipal)DslModeling::DomainRoleInfo.GetRolePlayer(this, VentanaPrincipalDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, VentanaPrincipalDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access VentanaPrincipal of a Tapiz
		/// <summary>
		/// Gets VentanaPrincipal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static VentanaPrincipal GetVentanaPrincipal(Tapiz element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TapizDomainRoleId) as VentanaPrincipal;
		}
		
		/// <summary>
		/// Sets VentanaPrincipal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetVentanaPrincipal(Tapiz element, VentanaPrincipal newVentanaPrincipal)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TapizDomainRoleId, newVentanaPrincipal);
		}
		#endregion
		#region Tapiz link accessor
		/// <summary>
		/// Get the TapizHasVentanaPrincipal link to a Tapiz.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal GetLinkToVentanaPrincipal (global::UPM_IPS.DNRDPVSQGProyectoMDD.Tapiz tapizInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal>(tapizInstance, global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal.TapizDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Tapiz not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region VentanaPrincipal link accessor
		/// <summary>
		/// Get the TapizHasVentanaPrincipal link to a VentanaPrincipal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal GetLinkToTapiz (global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaPrincipal ventanaPrincipalInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal>(ventanaPrincipalInstance, global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal.VentanaPrincipalDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of VentanaPrincipal not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TapizHasVentanaPrincipal instance accessors
		
		/// <summary>
		/// Get any TapizHasVentanaPrincipal links between a given Tapiz and a VentanaPrincipal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal> GetLinks( global::UPM_IPS.DNRDPVSQGProyectoMDD.Tapiz source, global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaPrincipal target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal>();
			global::System.Collections.Generic.IList<global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal>(source, global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal.TapizDomainRoleId);
			foreach ( global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal link in links )
			{
				if ( target.Equals(link.VentanaPrincipal) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TapizHasVentanaPrincipal link between a given Tapizand a VentanaPrincipal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal GetLink( global::UPM_IPS.DNRDPVSQGProyectoMDD.Tapiz source, global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaPrincipal target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal>(source, global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal.TapizDomainRoleId);
			foreach ( global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaPrincipal link in links )
			{
				if ( target.Equals(link.VentanaPrincipal) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.DNRDPVSQGProyectoMDD
{
	/// <summary>
	/// DomainRelationship TapizHasVentanaSecundaria
	/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("04ab66c1-7410-424a-a9a0-e87a4484eec5")]
	public partial class TapizHasVentanaSecundaria : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TapizHasVentanaSecundaria domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x04ab66c1, 0x7410, 0x424a, 0xa9, 0xa0, 0xe8, 0x7a, 0x44, 0x84, 0xee, 0xc5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TapizHasVentanaSecundaria link in the same Partition as the given Tapiz
		/// </summary>
		/// <param name="source">Tapiz to use as the source of the relationship.</param>
		/// <param name="target">VentanaSecundaria to use as the target of the relationship.</param>
		public TapizHasVentanaSecundaria(Tapiz source, VentanaSecundaria target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TapizHasVentanaSecundaria.TapizDomainRoleId, source), new DslModeling::RoleAssignment(TapizHasVentanaSecundaria.VentanaSecundariaDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TapizHasVentanaSecundaria(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TapizHasVentanaSecundaria(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TapizHasVentanaSecundaria(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TapizHasVentanaSecundaria(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Tapiz domain role code
		
		/// <summary>
		/// Tapiz domain role Id.
		/// </summary>
		public static readonly global::System.Guid TapizDomainRoleId = new global::System.Guid(0x6eaaf1dc, 0x2438, 0x4321, 0xb2, 0x7b, 0xf1, 0xb2, 0xf8, 0x73, 0xf4, 0x9c);
		
		/// <summary>
		/// DomainRole Tapiz
		/// Description for UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria.Tapiz
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria/Tapiz.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria/Tapiz.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "VentanaSecundaria", PropertyDisplayNameKey="UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria/Tapiz.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6eaaf1dc-2438-4321-b27b-f1b2f873f49c")]
		public virtual Tapiz Tapiz
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Tapiz)DslModeling::DomainRoleInfo.GetRolePlayer(this, TapizDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TapizDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Tapiz of a VentanaSecundaria
		/// <summary>
		/// Gets Tapiz.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Tapiz GetTapiz(VentanaSecundaria element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, VentanaSecundariaDomainRoleId) as Tapiz;
		}
		
		/// <summary>
		/// Sets Tapiz.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTapiz(VentanaSecundaria element, Tapiz newTapiz)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, VentanaSecundariaDomainRoleId, newTapiz);
		}
		#endregion
		#region VentanaSecundaria domain role code
		
		/// <summary>
		/// VentanaSecundaria domain role Id.
		/// </summary>
		public static readonly global::System.Guid VentanaSecundariaDomainRoleId = new global::System.Guid(0x42266d41, 0x6e05, 0x4401, 0xac, 0xa7, 0x08, 0xc5, 0xf0, 0x16, 0xc6, 0xe8);
		
		/// <summary>
		/// DomainRole VentanaSecundaria
		/// Description for
		/// UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria.VentanaSecundaria
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria/VentanaSecundaria.DisplayName", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria/VentanaSecundaria.Description", typeof(global::UPM_IPS.DNRDPVSQGProyectoMDD.DNRDPVSQGProyectoMDDDomainModel), "UPM_IPS.DNRDPVSQGProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Tapiz", PropertyDisplayNameKey="UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria/VentanaSecundaria.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("42266d41-6e05-4401-aca7-08c5f016c6e8")]
		public virtual VentanaSecundaria VentanaSecundaria
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (VentanaSecundaria)DslModeling::DomainRoleInfo.GetRolePlayer(this, VentanaSecundariaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, VentanaSecundariaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access VentanaSecundaria of a Tapiz
		/// <summary>
		/// Gets a list of VentanaSecundaria.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<VentanaSecundaria> GetVentanaSecundaria(Tapiz element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<VentanaSecundaria>, VentanaSecundaria>(element, TapizDomainRoleId);
		}
		#endregion
		#region Tapiz link accessor
		/// <summary>
		/// Get the list of TapizHasVentanaSecundaria links to a Tapiz.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria> GetLinksToVentanaSecundaria ( global::UPM_IPS.DNRDPVSQGProyectoMDD.Tapiz tapizInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria>(tapizInstance, global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria.TapizDomainRoleId);
		}
		#endregion
		#region VentanaSecundaria link accessor
		/// <summary>
		/// Get the TapizHasVentanaSecundaria link to a VentanaSecundaria.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria GetLinkToTapiz (global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaSecundaria ventanaSecundariaInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria>(ventanaSecundariaInstance, global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria.VentanaSecundariaDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of VentanaSecundaria not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TapizHasVentanaSecundaria instance accessors
		
		/// <summary>
		/// Get any TapizHasVentanaSecundaria links between a given Tapiz and a VentanaSecundaria.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria> GetLinks( global::UPM_IPS.DNRDPVSQGProyectoMDD.Tapiz source, global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaSecundaria target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria>();
			global::System.Collections.Generic.IList<global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria>(source, global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria.TapizDomainRoleId);
			foreach ( global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria link in links )
			{
				if ( target.Equals(link.VentanaSecundaria) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TapizHasVentanaSecundaria link between a given Tapizand a VentanaSecundaria.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria GetLink( global::UPM_IPS.DNRDPVSQGProyectoMDD.Tapiz source, global::UPM_IPS.DNRDPVSQGProyectoMDD.VentanaSecundaria target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria>(source, global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria.TapizDomainRoleId);
			foreach ( global::UPM_IPS.DNRDPVSQGProyectoMDD.TapizHasVentanaSecundaria link in links )
			{
				if ( target.Equals(link.VentanaSecundaria) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
